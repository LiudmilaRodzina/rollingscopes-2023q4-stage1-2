var d=Object.defineProperty;var l=(o,e,t)=>e in o?d(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var i=(o,e,t)=>(l(o,typeof e!="symbol"?e+"":e,t),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))a(n);new MutationObserver(n=>{for(const r of n)if(r.type==="childList")for(const s of r.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&a(s)}).observe(document,{childList:!0,subtree:!0});function t(n){const r={};return n.integrity&&(r.integrity=n.integrity),n.referrerPolicy&&(r.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?r.credentials="include":n.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function a(n){if(n.ep)return;n.ep=!0;const r=t(n);fetch(n.href,r)}})();const m=()=>fetch("http://localhost:3000/garage").then(o=>{if(!o.ok)throw new Error("Failed to fetch cars");return o.json()}).catch(o=>{const e=o.message||"Unknown error occurred";return Promise.reject(e)}),u="/liudmilarodzina-JSFE2023Q4/async-race/images/car.svg",c={makes:["Tesla","Ford","Chevrolet","BMW","Toyota","Honda","Mercedes-Benz","Audi","Nissan","Subaru"],models:["Model S","Mustang","Camaro","X5","Corolla","Civic","E-Class","A4","GT-R","WRX"]};class g{constructor(){i(this,"winnersView",null)}setWinnersView(e){this.winnersView=e}async displayGarage(){const e=document.createElement("div");e.classList.add("garage-container"),e.innerHTML=`
    <h2>Garage</h2>
    <p>Page #1</p>
    <p style="color: brown;">Garage under construction. Please come back later</p>
    <button id="button-generate">GENERATE CARS</button>
    <button id="button-winners">TO WINNERS</button>
  `,document.body.innerHTML="",document.body.append(e),document.getElementById("button-winners").addEventListener("click",()=>{this.winnersView&&this.winnersView.displayWinners()}),document.getElementById("button-generate").addEventListener("click",()=>{this.generateRandomCars(100)}),m().then(n=>{n.forEach(r=>{const s=this.renderCar(r);e.append(s)})}).catch(()=>{console.error("Error fetching and displaying cars")})}renderCar(e){const t=document.createElement("div");return t.classList.add("car-container"),this.renderCarName(e.name,t),this.renderCarImage(e,t),t}renderCarName(e,t){const a=document.createElement("span");a.textContent=e,a.classList.add("car-name"),t.append(a)}renderCarImage(e,t){fetch(u).then(a=>a.text()).then(a=>{const n=a.replace(/fill="#323232"/g,`fill="${e.color}"`),s=new DOMParser().parseFromString(n,"image/svg+xml").documentElement;s&&t.append(s)})}generateRandomCars(e){const a=Array.from({length:e},()=>this.generateRandomCar()).map(r=>this.renderCar(r)),n=document.querySelector(".garage-container");n==null||n.append(...a)}generateRandomCar(){const e=c.makes[Math.floor(Math.random()*c.makes.length)],t=c.models[Math.floor(Math.random()*c.models.length)],a=`#${Math.floor(Math.random()*16777215).toString(16)}`,n=Date.now()*1e3+Math.floor(Math.random()*1e3);return{name:`${e} ${t}`,color:a,id:n}}}class p{constructor(e){i(this,"garageView");this.garageView=e}displayWinners(){const e=document.createElement("div");e.classList.add("winners-container"),e.innerHTML=`
      <h2>Winners (0)</h2>
      <p>Page #1</p>
      <button id="button-garage">TO GARAGE</button>
      <p style="color: brown;">Winners page under development - Coming soon!</p>
    `,document.body.innerHTML="",document.body.append(e),document.getElementById("button-garage").addEventListener("click",()=>{this.garageView.displayGarage()})}}class h{constructor(){const e=new g,t=new p(e);e.setWinnersView(t),e.displayGarage()}}new h;
